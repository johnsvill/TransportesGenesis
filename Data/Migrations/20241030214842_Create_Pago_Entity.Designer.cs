// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransportesGenesis.Data.Context;

#nullable disable

namespace TransportesGenesis.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241030214842_Create_Pago_Entity")]
    partial class Create_Pago_Entity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TransportesGenesis.Models.DB.Negocio.Alumnos", b =>
                {
                    b.Property<int>("IdAlumno")
                        .HasColumnType("int");

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdPadre")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdAlumno");

                    b.HasIndex("FechaRegistro");

                    b.HasIndex("IdPadre");

                    b.ToTable("Alumnos", "genesis");
                });

            modelBuilder.Entity("TransportesGenesis.Models.DB.Negocio.Banco", b =>
                {
                    b.Property<int>("IdBanco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBanco"));

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdBanco");

                    b.HasIndex("FechaRegistro");

                    b.ToTable("Bancos", "genesis");
                });

            modelBuilder.Entity("TransportesGenesis.Models.DB.Negocio.Padres", b =>
                {
                    b.Property<int>("IdPadre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPadre"));

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPadre");

                    b.HasIndex("FechaRegistro");

                    b.ToTable("Padres", "genesis");
                });

            modelBuilder.Entity("TransportesGenesis.Models.DB.Negocio.Pago", b =>
                {
                    b.Property<int>("IdPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPago"));

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<int>("Anio")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaModif")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdAlumno")
                        .HasColumnType("int");

                    b.Property<int?>("IdPadre")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoCuenta")
                        .HasColumnType("int");

                    b.Property<int?>("IdTipoRecorrido")
                        .HasColumnType("int");

                    b.Property<string>("Imagen")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("MesPagado")
                        .HasColumnType("int");

                    b.Property<decimal>("MontoParcial")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("PagoCompleto")
                        .HasColumnType("bit");

                    b.Property<string>("Ubicacion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("IdPago");

                    b.HasIndex("FechaRegistro");

                    b.HasIndex("IdAlumno");

                    b.HasIndex("IdPadre");

                    b.HasIndex("IdTipoCuenta");

                    b.HasIndex("IdTipoRecorrido");

                    b.ToTable("Pagos", "genesis");
                });

            modelBuilder.Entity("TransportesGenesis.Models.DB.Negocio.TipoCuenta", b =>
                {
                    b.Property<int>("IdTipoCuenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoCuenta"));

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdBanco")
                        .HasColumnType("int");

                    b.Property<int?>("IdPadre")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdTipoCuenta");

                    b.HasIndex("FechaRegistro");

                    b.HasIndex("IdBanco");

                    b.HasIndex("IdPadre");

                    b.ToTable("TipoCuenta", "genesis");
                });

            modelBuilder.Entity("TransportesGenesis.Models.DB.Negocio.TipoRecorridoPago", b =>
                {
                    b.Property<int>("IdTipoRecorrido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoRecorrido"));

                    b.Property<int>("Activo")
                        .HasColumnType("int");

                    b.Property<int>("DiaMaximoPago")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Precio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TipoRecorrido")
                        .HasColumnType("int");

                    b.HasKey("IdTipoRecorrido");

                    b.ToTable("TipoRecorridoPago", "genesis");
                });

            modelBuilder.Entity("TransportesGenesis.Models.DB.Usuarios.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransportesGenesis.Models.DB.Negocio.Alumnos", b =>
                {
                    b.HasOne("TransportesGenesis.Models.DB.Negocio.TipoRecorridoPago", null)
                        .WithOne("IdAlumno")
                        .HasForeignKey("TransportesGenesis.Models.DB.Negocio.Alumnos", "IdAlumno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportesGenesis.Models.DB.Negocio.Padres", "Padres")
                        .WithMany("AlumnosLink")
                        .HasForeignKey("IdPadre");

                    b.Navigation("Padres");
                });

            modelBuilder.Entity("TransportesGenesis.Models.DB.Negocio.Pago", b =>
                {
                    b.HasOne("TransportesGenesis.Models.DB.Negocio.Alumnos", "Alumnos")
                        .WithMany("PagosLink")
                        .HasForeignKey("IdAlumno");

                    b.HasOne("TransportesGenesis.Models.DB.Negocio.Padres", "Padres")
                        .WithMany("PagosLink")
                        .HasForeignKey("IdPadre");

                    b.HasOne("TransportesGenesis.Models.DB.Negocio.TipoCuenta", "TipoCuenta")
                        .WithMany("PagosLink")
                        .HasForeignKey("IdTipoCuenta");

                    b.HasOne("TransportesGenesis.Models.DB.Negocio.TipoRecorridoPago", "TipoRecorridoPago")
                        .WithMany("PagosLink")
                        .HasForeignKey("IdTipoRecorrido");

                    b.Navigation("Alumnos");

                    b.Navigation("Padres");

                    b.Navigation("TipoCuenta");

                    b.Navigation("TipoRecorridoPago");
                });

            modelBuilder.Entity("TransportesGenesis.Models.DB.Negocio.TipoCuenta", b =>
                {
                    b.HasOne("TransportesGenesis.Models.DB.Negocio.Banco", "Bancos")
                        .WithMany("TipoCuentasLink")
                        .HasForeignKey("IdBanco");

                    b.HasOne("TransportesGenesis.Models.DB.Negocio.Padres", "Padres")
                        .WithMany("TipoCuentasLink")
                        .HasForeignKey("IdPadre");

                    b.Navigation("Bancos");

                    b.Navigation("Padres");
                });

            modelBuilder.Entity("TransportesGenesis.Models.DB.Negocio.Alumnos", b =>
                {
                    b.Navigation("PagosLink");
                });

            modelBuilder.Entity("TransportesGenesis.Models.DB.Negocio.Banco", b =>
                {
                    b.Navigation("TipoCuentasLink");
                });

            modelBuilder.Entity("TransportesGenesis.Models.DB.Negocio.Padres", b =>
                {
                    b.Navigation("AlumnosLink");

                    b.Navigation("PagosLink");

                    b.Navigation("TipoCuentasLink");
                });

            modelBuilder.Entity("TransportesGenesis.Models.DB.Negocio.TipoCuenta", b =>
                {
                    b.Navigation("PagosLink");
                });

            modelBuilder.Entity("TransportesGenesis.Models.DB.Negocio.TipoRecorridoPago", b =>
                {
                    b.Navigation("IdAlumno");

                    b.Navigation("PagosLink");
                });
#pragma warning restore 612, 618
        }
    }
}
